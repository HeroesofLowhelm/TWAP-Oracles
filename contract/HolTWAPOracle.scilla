(* SPDX-License-Identifier: MIT *)
scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import IntUtils PairUtils

library HolTWAPOracle
let one = Uint256 1

(* Dummy user-defined ADT *)
(* Error events *)
type Error =
| CodeIsSender
| CodeInsufficientFunds
| CodeInsufficientAllowance

let random =
  fun (entropy: Uint256) =>
  fun (block_number: BNum) =>
  fun (addr: ByStr20) =>
    let addr_hash = builtin keccak256hash addr in
    let entropy_hash = builtin keccak256hash entropy in
    let blockhash = builtin keccak256hash block_number in
    let ehash = builtin concat entropy_hash blockhash in
    let ahash = builtin concat ehash addr_hash in
    let last_hash = builtin concat ehash ahash in
    let hash = builtin keccak256hash last_hash in
        builtin to_uint256 hash

let make_error =
    fun (result : Error) =>
        let result_code = 
        match result with
        | CodeIsSender              => Int32 -1
        | CodeInsufficientFunds     => Int32 -2
        | CodeInsufficientAllowance => Int32 -3
        end
        in
        { _exception : "Error"; code : result_code }



(***************************************************)
(*             The contract definition             *)
(***************************************************)
contract HolTWAPOracle 
(
    contract_owner: ByStr20
)

(* Mutable fields *)
field randNonce: Uint256 = Uint256 0
field modulus: Uint256 = Uint256 1000
field pendingRequests: Map ByStr20 Bool = Emp ByStr20 Bool

(**************************************)
(*             Procedures             *)
(**************************************)

procedure Throw(error: Error)
    e = make_error error;
    throw e
end

procedure IsNotOwner(address: ByStr20)
    is_sender = builtin eq _sender address;
    match is_sender with
    | True =>
        err = CodeIsSender;
        ThrowError err
    | False =>
    end
end

(***************************************)
(*             Transitions             *)
(***************************************)
transition getTWAPPrice()
    let cur_nonce = randNonceTemp <- randNonce in
        builtin add randNonceTemp one;
    randNonce := cur_nonce;
    
end
