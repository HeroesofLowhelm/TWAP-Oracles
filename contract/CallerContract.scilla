(* SPDX-License-Identifier: MIT *)
scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import IntUtils

library CallerContract
let one = Uint256 1
let zero = Uint128 0
let true = True
let one_msg = 
    fun (msg : Message) => 
        let nil_msg = Nil {Message} in
        Cons {Message} msg nil_msg   
(* Dummy user-defined ADT *)
type Error =
| CodeIsOracle
| CodeIsPendingRequest
| CodeIsOracleAddressNotSet

let make_error =
    fun (result : Error) =>
        let result_code = 
        match result with
        | CodeIsOracle               => Int32 -1
        | CodeIsPendingRequest       => Int32 -2
        | CodeIsOracleAddressNotSet  => Int32 -3
        end
        in
        { _exception : "Error"; code : result_code }


(***************************************************)
(*             The contract definition             *)
(***************************************************)
contract CallerContract 
(
    contract_owner: ByStr20
)

(* Mutable fields *)
field tWAPHol: Uint256 = Uint256 0
field oracleAddress: Option ByStr20 = None {ByStr20}
field myRequests: Map Uint256 Bool = Emp Uint256 Bool

(**************************************)
(*             Procedures             *)
(**************************************)

procedure ThrowError(error: Error)
    e = make_error error;
    throw e
end




procedure IsNotOracle(address: ByStr20)
    oracleAddressTmp <- oracleAddress;
    match oracleAddressTmp with
    | Some v =>
        is_oracle = builtin eq v address;
        match is_oracle with
        | False =>
            err = CodeIsOracle;
            ThrowError err
        | True =>
        end
    | None =>
        err = CodeIsOracleAddressNotSet;
        ThrowError err
    end
end


procedure IsNotPendingRequest(id: Uint256)
    isPendingRequest <- exists myRequests[id];
    match isPendingRequest with
    | False =>
        err = CodeIsPendingRequest;
        ThrowError err
    | True =>
    end
end


(***************************************)
(*             Transitions             *)
(***************************************)

(* @dev: Set Oracle Contract address. Only contract owner allowed to invoke.   *)
(* param oracleAddress:      Address of the oracle contract.                  *)
transition setOracleAddress(oracleAddr : ByStr20)
    oracleAddressTmp = Some {ByStr20} oracleAddr ;
    oracleAddress := oracleAddressTmp
end

(* @dev: Transition for users to get TWAP of $Hol. This invokes getTWAPPrice() transition in the oracle contract   *)
transition getTWAPHolPrice()
    oracleAddressTmp <- oracleAddress;
    match oracleAddressTmp with
    | Some v =>
        msg = {_tag: "getTWAPPrice"; _recipient: v; _amount: zero};
        msgs = one_msg msg;
        send msgs
    | None =>
        err = CodeIsOracleAddressNotSet;
        ThrowError err
    end
end

(* @dev: Receive request id from the oracle contract. Only oracle contract allowed to invoke.   *)
(* param id:      Request id.                                                                  *)
transition receiveRequestId(id: Uint256)
    IsNotOracle _sender;
    myRequests[id] := true;
    e = {_eventname: "ReceivedNewRequestId"; id: id}
end

(* @dev: Receive TWAP of $HOL and request id from oracle contract. Only oracle contract allowed to invoke  *)
(* param twapPrice:      TWAP of $Hol.                                                                    *)
(* param id:       Request id.                                                                            *)
transition callback(twapPrice: Uint256, id: Uint256)
    IsNotOracle _sender;
    IsNotPendingRequest id;
    tWAPHol := twapPrice;
    e = {_eventname: "TWAPPriceUpdated"; price: twapPrice};
    event e
end
