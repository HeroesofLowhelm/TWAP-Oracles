(* SPDX-License-Identifier: MIT *)
scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import IntUtils

library CallerContract
let one = Uint256 1
let zero = Uint128 0

let one_msg = 
    fun (msg : Message) => 
        let nil_msg = Nil {Message} in
        Cons {Message} msg nil_msg   
(* Dummy user-defined ADT *)
type Error =
| CodeIsOracle
| CodeIsPendingRequest

let make_error =
    fun (result : Error) =>
        let result_code = 
        match result with
        | CodeIsOracle               => Int32 -1
        | CodeIsPendingRequest       => Int32 -2
        end
        in
        { _exception : "Error"; code : result_code }


(***************************************************)
(*             The contract definition             *)
(***************************************************)
contract CallerContract 
(
    contract_owner: ByStr20
)

(* Mutable fields *)
field TWAPHol: Option Uint256 = None {Uint256}
field oracleAddress: Option ByStr20 = None {ByStr20}
field myRequests: Map Uint256 Bool = Emp Uint256 Bool

(**************************************)
(*             Procedures             *)
(**************************************)

procedure Throw(error: Error)
    e = make_error error;
    throw e
end




procedure IsNotOracle(address: ByStr20)
    oracleAddressTmp <- oracleAddress;
    is_oracle = builtin eq oracleAddressTmp address;
    match is_oracle with
    | False =>
        err = CodeIsOwner;
        ThrowError err
    | True =>
    end
end


procedure IsNotPendingRequest(_id: Uint256)
    isPendingRequest <- exists myRequests[_id];
    match isPendingRequest with
    | False =>
        err = CodeIsPendingRequest
        ThrowError err
    | True =>
    end
end


(***************************************)
(*             Transitions             *)
(***************************************)

(* @dev: Set Oracle Contract address. Only contract owner allowed to invoke.   *)
(* param _oracleAddress:      Address of the oracle contract.                  *)
transition setOracleAddress(ByStr20 _oracleAddress)
    oracleAddress := _oracleAddress
end

(* @dev: Transition for users to get TWAP of $Hol. This invokes getTWAPPrice() transition in the oracle contract   *)
transition getTWAPHolPrice()
    oracleAddressTmp <- oracleAddress;
    msg = {_tag: "getTWAPPrice", _recipient: oracleAddressTmp, _amount: zero};
    msgs = one_msg msg;
    send msgs
end

(* @dev: Receive request id from the oracle contract. Only oracle contract allowed to invoke.   *)
(* param _id:      Request id.                                                                  *)
transition receiveRequestId(Uint256 _id)
    IsNotOracle _sender;
    myRequests[_id] := True;
    e = {_eventname: "ReceivedNewRequestId", _id: _id}
end

(* @dev: Receive TWAP of $HOL and request id from oracle contract. Only oracle contract allowed to invoke  *)
(* param _twapPrice:      TWAP of $Hol.                                                                    *)
(* param _id:       Request id.                                                                            *)
transition callback(Uint256 _twapPrice, Uint256 _id)
    IsNotOracle _sender;
    IsNotPendingRequest _id;
    TWAPHol := _twapPrice;
    e = {_eventname: "TWAPPriceUpdated", _price: _twapPrice};
    event e
end
